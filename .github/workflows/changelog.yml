# Glossary
#   - MCPR = Milestone Changelog Pull Request, the result of this workflow
#
# Test cases
#   - Open milestone assigned to merged PR should add the PR to the MCPR
#   - Open milestone deassigned to merged PR should clean the PR to the MCPR
#   - Open milestone changed in merged PR should add the PR to new MCPR and remove it from old MCPR
#   - When the body of a merged PR is edited, MCPR body updates
#   - When PR changelog section is not formed or not valid, MCPR changelog contains a generic-form
#     entry for it
#   - When open milestone changes title, MCPR updates its title and body
#   - Closed milestone assigned to merged PR should not do anything
#   - Closed milestone deassigned to merged PR should not do anything
#   - Closed milestone changed in merged PR should add the PR to new MCPR and remove it from old MCPR
#   - When closed milestone changes title, nothing should change
#   - Any human action triggers the workflow only once
#
# Tasks
#   - Create board card for the changelog PR in 'In Progress' column?
#   - Close milestone when MCPR merge?
#   - Validate milestone title for semver before doing anything?

name: Changelog
on:
  pull_request:
    types:
      - "closed"
      - "edited"
    branches:
      - "main"
  issues:
    types:
      - "milestoned"
      - "demilestoned"
jobs:
  milestones:
    name: Open milestones
    runs-on: ubuntu-latest
    # if
    #   pull_request changes or merges, skipping the changelog PR itself
    #   milestone changes (via issue api), skipping the changelog PR itself
    # if: |
    #   (
    #     github.event.pull_request &&
    #     github.event.pull_request.state == 'closed' &&
    #     github.event.pull_request.merged &&
    #     github.event.pull_request.milestone.state == 'open' &&
    #     !contains(github.event.pull_request.labels.*.name, 'changelog')
    #   ) || (
    #     github.event.issue.pull_request &&
    #     github.event.issue.pull_request.state == 'closed' &&
    #     github.event.issue.pull_request.merged &&
    #     github.event.issue.milestone.state == 'open' &&
    #     !contains(github.event.issue.labels.*.name, 'changelog')
    #   )
    steps:
      - name: Dump condition
        run: |
          echo "PULL REQUESTS (when changes itself)"
          echo '${{ github.event.pull_request }} -- github.event.pull_request'
          echo '${{ github.event.pull_request.state }} -- github.event.pull_request.state'
          echo '${{ github.event.pull_request.merged }} -- github.event.pull_request.merged'
          echo '${{ github.event.pull_request.milestone.state}} -- github.event.pull_request.milestone.state'
          echo "${{ !contains(github.event.pull_request.labels.*.name, 'changelog'}} -- lacks label"

          echo "ISSUE (when milestone changes)"
          echo '${{ github.event.issue.pull_request }} -- github.event.issue.pull_request'
          echo '${{ github.event.issue.pull_request.state }} -- github.event.issue.pull_request'
          echo '${{ github.event.issue.pull_request.merged }} -- github.event.issue.pull_request.merged'
          echo '${{ github.event.issue.milestone.state }} -- github.event.issue.milestone.state'
          echo "${{ !contains(github.event.issue.labels.*.name, 'changelog'}} -- lacks label"
      - name: Find Open Milestones
        id: milestones
        env:
          GITHUB_TOKEN: ${{ secrets.CHANGELOG_ACCESS_TOKEN }}
        run: |
          milestones="$(gh api 'repos/${{ github.repository }}/milestones' \
            -q '[.[] | select(.state == "open") ]')"

          count="$(echo $milestones | jq '. | length')"

          echo "::set-output name=list::${milestones}"
          echo "::set-output name=count::${count}"

    outputs:
      list: ${{ steps.milestones.outputs.list }}
      count: ${{ steps.milestones.outputs.count }}

  chanegelogs:
    if: needs.milestones.outputs.count > 0
    name: Changelog ${{ matrix.milestone.title }}
    runs-on: ubuntu-latest
    needs:
      - milestones
    strategy:
      matrix:
        milestone: ${{ fromJSON( needs.milestones.outputs.list ) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create changelog
        uses: ./.github/actions/milestone-changelog
        with:
          milestone: ${{ toJSON( matrix.milestone ) }}
          token: ${{ secrets.CHANGELOG_ACCESS_TOKEN }}
