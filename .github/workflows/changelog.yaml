# Glossary
#   - MCPR = Milestone Changelog Pull Request, the result of this workflow
#
# Test cases
#   - Open milestone assigned to merged PR should add the PR to the MCPR
#   - Open milestone deassigned to merged PR should clean the PR to the MCPR
#   - Open milestone changed in merged PR should add the PR to new MCPR and remove it from old MCPR
#   - When the body of a merged PR is edited, MCPR body updates
#   - When PR changelog section is not formed or not valid, MCPR changelog contains a generic-form
#     entry for it
#   - When open milestone changes title, MCPR updates its title and body
#   - Closed milestone assigned to merged PR should not do anything
#   - Closed milestone deassigned to merged PR should not do anything
#   - Closed milestone changed in merged PR should add the PR to new MCPR and remove it from old MCPR
#   - When closed milestone changes title, nothing should change
#   - Any human action triggers the workflow only once
#
# Tasks
#   - Create board card for the changelog PR in 'In Progress' column?
#   - Close milestone when MCPR merge?
#   - Validate misletone title for semver before doing anything?

name: Release Changelog
on:
  # TODO remove ?
  push:
    branches:
      - "main"
  milestone:
    types:
      - "opened"
      - "edited"
  pull_request:
    types:
      # TODO must be merged
      - "closed"
      - "edited"
    branches:
      - "main"
  # A PR is an issue, and PR milestones are acceptable via the isseus API
  issues:
    types:
      - "milestoned"
      - "demilestoned"
# TODO permissions: "write-all" # FIXME not that much
# permissions:
#   pull-requests: write
jobs:
  milestones:
    name: Open milestones
    runs-on: ubuntu-latest
    steps:
      - name: Find Open Milestones
        id: milestones
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          milestones="$(gh api 'repos/${{ github.repository }}/milestones' \
            -q '[.[] | select(.state == "open") ]')"

          count="$(echo $milestones | jq '. | length')"

          echo "::set-output name=list::${milestones}"
          echo "::set-output name=count::${count}"
    outputs:
      list: ${{ steps.milestones.outputs.list }}
      count: ${{ steps.milestones.outputs.count }}

  chanegelogs:
    name: Changelog ${{ matrix.milestone.title }}
    runs-on: ubuntu-latest
    needs:
      - milestones
    if: needs.milestones.outputs.count > 0
    strategy:
      matrix:
        milestone: ${{ fromJSON( needs.milestones.outputs.list ) }}
    steps:
      # The gh utility has a shortcut to filter merged PRs by milestone, while it would require
      # multiple calls in JS rest client
      - name: Find Merged Pull Requsts
        id: merged_milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs="$(gh pr list \
            --repo ${{ github.repository }} \
            --search 'milestone:${{ matrix.milestone.title }}' \
            --state merged \
            --json url,title,body,state,milestone)"
          echo "::set-output name=prs::${prs}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Collect Changelog
        id: extract_body
        uses: actions/github-script@v5
        env:
          PULL_REQUESTS: ${{ steps.merged_milestone.outputs.prs }}
        with:
          result-encoding: string
          script: |
            const changelog = require("./.github/scripts/changelog/format_changelog_body.js")
            const prs = JSON.parse(process.env.PULL_REQUESTS)
            const body = await changelog(prs)
            core.setOutput("body", body);

      - name: Write Changelog File
        id: file
        run: |
          filename="./CHANGELOG/CHANGELOG-${{ matrix.milestone.title }}"
          body="${{ steps.extract_body.outputs.body }}"
          mkdir -p ./CHANGELOG
          echo "${body}" > $filename

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3.10.1
        with:
          commit-message: Re-generate changelog
          title: Changelog ${{ matrix.milestone.title }}
          body: ${{ steps.extract_body.outputs.body }}
          labels: changelog, auto
          base: main
          branch: changelog/${{ matrix.milestone.title }}
          token: ${{ secrets.GITHUB_TOKEN }} # questionable
          # assignees: konstantin-axenov
          # reviewers: nabokihms
          milestone: ${{ matrix.milestone.number }}
          delete-branch: true
