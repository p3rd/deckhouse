# NOTE PR is an issue, and PR milestones are acceptable via isseus API
# What we want to react to:
# - PR with currently opened release milestone
#   - release milestone is that named as semver, e.g. "v1.39.42"
#   - the milestone MUST be opened
#     - gh issue list --json id,number,milestone --jq ".[].milestone.title"

# Get open milestones
#   gh api 'repos/deckhouse/deckhouse/milestones?state=open' --jq "[.[] | .title]"
#   ["v1.26.0"]
#   TODO check for semver
#

#-----------------------------------------------------------
# Get milestone PRs that vere merged
#   https://docs.github.com/en/rest/reference/pulls#check-if-a-pull-request-has-been-merged
#
#   gh pr list --json title,state,body -S "milestone:v1.39.0"
#

#-----------------------------------------------------------
# Get milestones
#   gh api 'repos/shvgn/deckhouse/milestones' -q '.[] | {title, state}'
#   {"state":"open","title":"v1.39.0"}
#   {"state":"open","title":"v1.40.0"}
#

#-----------------------------------------------------------
# Реагирует на события
# - Мерж в main из ПР PR с майлстоном MS
# - Изменение майлстона в замерженном PR
#   - Если майлстон закрыт, то ничего не делает
#   - Для каждого открытого майлстона MS
# - Комментарий /changelog в ПР с ченджом
#
# Что делает
#   - Создает/Обновляет ПР в main с ченджлогом для MS, присваивает ему этот MS
#     - Генерирует ченджлог для патч-версии
#       - Собирает все замерженные ПР с майлстоном MS
#       - Парсит описание в специальной секции
#     - Оформляет файл (редактирует YAML)
#       - Создает или читает файл для минорной версии CHANGELOG/CHANGELOG-v{maj.min}.yaml
#       - Добавляет или перезаписывает секцию с ченджлогом патч-версии (MS) в этом файле
#     - Создает или обновляет ПР в main с новой версией файла
#     - Приносит ПР ченджа в доску проекта

# prerequisites:
# - milestone:
#   - is semver
#   - is open
# - pr:
#   - has milestone (filtering PRs does that iherintly)
#   - is merged
# - issue:
#   - must be PR
name: Generate Release Changelog
on:
  push:
    branches:
      - "main"
  milestone:
    types:
      - "opened"
      - "edited"
  pull_request:
    types:
      # TODO must be merged
      - "closed"
    branches:
      - "main"
  issues:
    types:
      - "milestoned"
      - "demilestoned"
# TODO permissions: "write-all" # FIXME not that much
# permissions:
#   pull-requests: write
jobs:
  milestones:
    name: Opened milestones
    runs-on: ubuntu-latest
    steps:
      - name: List open milestones
        id: milestones
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          milestones="$(gh api 'repos/${{ github.repository }}/milestones' \
            -q '[.[] | select(.state == "open") ]')"

          count="$(echo $milestones | jq '. | length')"

          echo "::set-output name=list::${milestones}"
          echo "::set-output name=count::${count}"
    outputs:
      list: ${{ steps.milestones.outputs.list }}
      count: ${{ steps.milestones.outputs.count }}

  pull_requests:
    name: Merged PRs
    runs-on: ubuntu-latest
    needs:
      - milestones
    if: needs.milestones.outputs.count > 0
    strategy:
      matrix:
        milestone: ${{ fromJSON( needs.milestones.outputs.list ) }}
    steps:
      - name: Find merged PRs
        id: find_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prs="$(gh pr list \
            --repo ${{ github.repository }} \
            --search 'milestone:${{ matrix.milestone.title }}' \
            --state merged \
            --json number,title,body,state,milestone)"

          echo "::set-output name=prs::${prs}"
          echo "PRs: ${prs}"
          count=$(echo $prs | jq '. | length')
          echo "N = ${count}"

      - name: Checkout
        uses: actions/checkout@v2

      # - name: Extract body
      #   id: extract_body
      #   uses: ././.github/actions/changelog
      #   with:
      #     prs: ${{ steps.find_prs.outputs.prs }}

      # https://github.com/actions/github-script
      - name: Extract changelog body
        id: extract_body
        uses: actions/github-script@v5
        env:
          PULL_REQUESTS: ${{ steps.find_prs.outputs.prs }}
        with:
          result-encoding: string
          script: |
            const changelog = require("./.github/scripts/changelog/format_changelog_body.js")

            const prs = JSON.parse(process.env.PULL_REQUESTS)
            const body = await changelog(prs)

            console.log(body)
            core.setOutput("body", body);
      - name: Collect changelogs of the minor release in one file
        id: file
        run: |
          filename="./CHANGELOG/CHANGELOG-${{ matrix.milestone.title }}"
          body="${{ steps.extract_body.outputs.body }}"
          mkdir -p ./CHANGELOG
          echo "${body}" > $filename
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3.10.1
        with:
          commit-message: Re-generate changelog
          title: Changelog ${{ matrix.milestone.title }}
          body: ${{ steps.extract_body.outputs.body }}
          labels: changelog, auto
          base: main
          branch: changelog/${{ matrix.milestone.title }}
          token: ${{ secrets.GITHUB_TOKEN }} # questionable
          # assignees: konstantin-axenov
          # reviewers: nabokihms
          milestone: ${{ matrix.milestone.number }}
          delete-branch: true
